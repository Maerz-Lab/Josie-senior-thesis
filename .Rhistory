lines(pred.data$distance, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data$distance, pred.post.upper, col="blue", lty=2) #upper CI
#### Plot predicted occupancy probability: Distance to last occupied ####
pred.data <- data.frame(Distance=seq(from=-1.0359, to=3.105663, length=100),
hydro.scaled=0)
#backtransforming
pred.data$distance <- pred.data$Distance * sd(distance_scaled) + mean(distance_scaled)
pred.data$hydro <- pred.data$hydro.scaled * sd(hydro.scaled) + mean(hydro.scaled)
psi.coef.post <- as.matrix(jags.post.samples[,c("beta0", "beta1", "alpha0", "alpha1")])
head(psi.coef.post)
#Create prediction matrix, one row for each MCMC iteration.
n.iter <- nrow(psi.coef.post)
psi.post.pred <- matrix(NA, nrow=n.iter, ncol=nrow(pred.data))
#Predict Ïˆ for each MCMC iteration
#Didn't put x 2 because we are assuming we are holding that constant at zero.
for(i in 1:n.iter) {
psi.post.pred[i,] <- plogis(psi.coef.post[i,"beta0"] +
psi.coef.post[i,"beta1"]*pred.data$distance +
psi.coef.post[i,"alpha0"] +
psi.coef.post[i,"alpha1"]*pred.data$hydro)
}
#posterior mean and 95% CI
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob=0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob=0.975)
plot(pred.data$distance, psi.post.pred[1,], type="l", xlab="Distance to nearest occupied wetland",
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data$distance, pred.post.mean, col="blue") #mean
lines(pred.data$distance, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data$distance, pred.post.upper, col="blue", lty=2) #upper CI
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(Distance = seq(from = -1.0359, to = 3.105663, length = 100))
pred.data$distance <- pred.data$Distance * sd(distance_scaled) + mean(distance_scaled)
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(Distance = seq(from = min(distance), to = max(distance), length = 100))
pred.data$distance <- pred.data$Distance * sd(distance_scaled) + mean(distance_scaled)
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(Distance = seq(from = min(distance), to = max(distance), length = 100))
View(pred.data)
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(Distance = seq(from = min(distance), to = max(distance), length = 100))
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(Distance = seq(from = min(distance), to = max(distance), length = 100), hydro.scaled =0)
pred.data$distance <- pred.data$Distance * sd(distance_scaled) + mean(distance_scaled)
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(Distance = seq(from = min(distance), to = max(distance), length = 100), hydro.scaled =0)
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
pred.data$distance <- pred.data$Distance * sd(distance_scaled) + mean(distance_scaled)
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(distance_scaled = seq(from = min(distance), to = max(distance), length = 100), hydro.scaled =0)
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(distance_scaled = seq(from = min(distance), to = max(distance), length = 100), hydro.scaled =0)
pred.data$distance <- pred.data$distance_scaled * sd(distance_scaled) + mean(distance_scaled)
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(distance_scaled = seq(from = min(distance), to = max(distance), length = 100), hydro.scaled =0)
#### Plot predicted occupancy probability: Distance to last occupied ####
# Check if psi.post.pred is correctly filled
# Set up a sequence for prediction data
pred.data <- data.frame(distance_scaled = seq(from = min(distance_scaled), to = max(distance_scaled), length = 100), hydro.scaled =0)
pred.data$distance <- pred.data$distance_scaled * sd(distance_scaled) + mean(distance_scaled)
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
pred.data$distance <- pred.data$distance_scaled*sd(distance_scaled) + mean(distance_scaled)
pred.data$distance <- pred.data$distance_scaled*(sd(distance_scaled)) + (mean(distance_scaled))
pred.data$distance <- pred.data$distance_scaled*(sd(distance))+(mean(distance))
pred.data$distance <- pred.data$distance_scaled*(sd(distance))+(mean(distance))
pred.data$hydro <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, pred.post.mean[i,], col=gray(0.8)) } # posterior predictive distribution
lines(pred.data$distance, pred.post.lower, col = "blue", lty = 2)  # lower CI
lines(pred.data$distance, pred.post.upper, col = "blue", lty = 2)  # upper CI
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, pred.post.mean, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, pred.post.mean[i,], col=gray(0.8)) } # posterior predictive distribution
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, pred.post.mean[i,], col=gray(0.8)) } # posterior predictive distribution
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, psi.post.pred, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
View(psi.post.pred)
plot(pred.data$distance, psi.post.pred[1,], type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
#prediction line for first posterior samples
for(i in 1:n.iter) { lines(pred.data$distance, pred.post.mean[i,], col=gray(0.8)) } # posterior predictive distribution
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, psi.post.pred, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled +
psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data$hydro.scaled)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, psi.post.pred, type = "l", col = "blue",
xlab = "Distance to nearest occupied wetland", ylab = "Occurrence probability",
ylim = c(0, 1))
plot(pred.data$distance, psi.post.pred[1,], type="l", xlab="Distance to nearest occupied wetland",
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data$distance, pred.post.mean, col="blue") #mean
lines(pred.data$distance, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data$distance, pred.post.upper, col="blue", lty=2) #upper CI
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred[i, ] <- plogis(psi.coef.post[i, "beta0"] +
psi.coef.post[i, "beta1"] * pred.data$distance_scaled
)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred)
pred.post.lower <- apply(psi.post.pred, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data$distance, psi.post.pred[1,], type="l", xlab="Distance to nearest occupied wetland",
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data$distance, psi.post.pred[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data$distance, pred.post.mean, col="blue") #mean
lines(pred.data$distance, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data$distance, pred.post.upper, col="blue", lty=2) #upper CI
####### DETECTION PROBABILITY
pred.data <- data.frame(hydro.scaled = seq(from = min(hydro.scaled), to = max(hydro.scaled), length = 100), distance_scaled =0)
pred.data$hydro <- pred.data$hydro.scaled*(sd(hydro))+(mean(hydro))
pred.data$distance <- rep(0, nrow(pred.data))  # holding hydro constant at zero if that's the intention
####### DETECTION PROBABILITY
pred.data2 <- data.frame(hydro.scaled = seq(from = min(hydro.scaled), to = max(hydro.scaled), length = 100), distance_scaled =0)
pred.data2$hydro <- pred.data2$hydro.scaled*(sd(hydro))+(mean(hydro))
pred.data2$distance <- rep(0, nrow(pred.data2))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data2))
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred2 <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data2))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred2[i, ] <- plogis(psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data2$hydro.scaled
)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred2)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred2)
pred.post.lower <- apply(psi.post.pred2, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred2, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)",
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="blue") #mean
lines(pred.data2$hydro, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="blue", lty=2) #upper CI
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12)
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col=gray(0.8))
} # posterior predictive distribution
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="blue") #mean
lines(pred.data2$hydro, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="blue", lty=2) #upper CI
View(pred.data2)
pred.data2 <- data.frame(hydro.scaled = seq(from = min(hydro.scaled), to =3, length = 100), distance_scaled =0)
pred.data2$hydro <- pred.data2$hydro.scaled*(sd(hydro))+(mean(hydro))
pred.data2$distance <- rep(0, nrow(pred.data2))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred2 <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data2))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred2[i, ] <- plogis(psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data2$hydro.scaled
)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred2)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred2)
pred.post.lower <- apply(psi.post.pred2, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred2, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="blue") #mean
lines(pred.data2$hydro, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="blue", lty=2) #upper CI
pred.data2 <- data.frame(hydro.scaled = seq(from = min(hydro.scaled), to =5, length = 100), distance_scaled =0)
pred.data2$hydro <- pred.data2$hydro.scaled*(sd(hydro))+(mean(hydro))
pred.data2$distance <- rep(0, nrow(pred.data2))  # holding hydro constant at zero if that's the intention
# Create a matrix to store predictions across MCMC samples
n.iter <- nrow(psi.coef.post)  # number of iterations in posterior samples
psi.post.pred2 <- matrix(NA, nrow = n.iter, ncol = nrow(pred.data2))
# Calculate predictions
for(i in 1:n.iter) {
psi.post.pred2[i, ] <- plogis(psi.coef.post[i, "alpha0"] +
psi.coef.post[i, "alpha1"] * pred.data2$hydro.scaled
)
}
# Check the structure of psi.post.pred to ensure it's filled
head(psi.post.pred2)
# Calculate mean and credible intervals for the predictions
pred.post.mean <- colMeans(psi.post.pred2)
pred.post.lower <- apply(psi.post.pred2, 2, quantile, prob = 0.025)
pred.post.upper <- apply(psi.post.pred2, 2, quantile, prob = 0.975)
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Occurrence probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col=gray(0.8))
} # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="blue") #mean
lines(pred.data2$hydro, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="blue", lty=2) #upper CI
write.csv(DipnetData)
write.csv(DipnetData, "CleanedDipnetData.csv", row.names = FALSE)
getwd()
lines(pred.data2$hydro, psi.post.pred2[i,], col=gray(0.8), alpha=0.2)
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col=rgb(gray(0.8), alpha= 0.2))
} # posterior predictive distribution
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col(gray(0.8)), col = rgb(0,0,1, alpha = 0.5)) } # posterior predictive distribution
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col = rgb(0,0,1, alpha = 0.5)) } # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="blue") #mean
lines(pred.data2$hydro, pred.post.lower, col="blue", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="blue", lty=2) #upper CI
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col = rgb(0,0,1, alpha = 0.2)) } # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="gray") #mean
lines(pred.data2$hydro, pred.post.lower, col="gray", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="gray", lty=2) #upper CI
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col = rgb(0,0,1, alpha = 0.05)) } # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="gray") #mean
lines(pred.data2$hydro, pred.post.lower, col="gray", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="gray", lty=2) #upper CI
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col = rgb(0,0,1, alpha = 0.01)) } # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="gray") #mean
lines(pred.data2$hydro, pred.post.lower, col="gray", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="gray", lty=2) #upper CI
# Plot the predicted occupancy probability against distance
plot(pred.data2$hydro, psi.post.pred2[1,], type="l", xlab="Hydroperiod (months)", xlim = c(0,12),
ylab="Detection probability", ylim=c(0, 1), col=gray(0.8)) #prediction line for first posterior samples
for(i in 1:n.iter) {
lines(pred.data2$hydro, psi.post.pred2[i,], col = rgb(0,0,1, alpha = 0.025)) } # posterior predictive distribution
lines(pred.data2$hydro, pred.post.mean, col="gray") #mean
lines(pred.data2$hydro, pred.post.lower, col="gray", lty=2) #lower CI
lines(pred.data2$hydro, pred.post.upper, col="gray", lty=2) #upper CI
